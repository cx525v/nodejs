...
import bodyParser from 'body-parser';
impoty {graphiqlExpress, graphqlExpress} from 'graphql-server-express';
import {makeExecutableSchema} from 'graphql-tools'
import cors from 'cors';
import jwt from 'jsonwebtoken';
import {createServer} from 'http';
import {execute, subscribe} from 'graphql';
import {SubscriptionServer} from 'subscription-transport-ws';
import {joinMosterAdapt} from 'join-monster-graphql-tools-adapter';

import {typeDefs} from './schema';
import resolvers from './resolvers';
import models from './models';
import {refreshToken } from './auth';
import joinMonsterMetadata from './joinMonsterMetadata'

const schema = makeExecutableSchema({
  typeDefs,
  resolvers
});

joinMonsterAdapt(schema, joinMonsterMetadata);
const SECRET =...
const SECRET_2 =..

const app = express();
const addUser = async(req, res, next) => {
  const token = req.headers['x-token'];
  if(token) {
    try {
      const { user} = jwt.verify(token, SECRET);
      req.user = user;
    } catch (err) {
       const refreshToken = req.headers['x-refresh-token'];
       const newTokens = await refreshTokens(token, refreshToken, models, SECRET, SECRET_2);
       if(newTokens.token && newTokens.refreshToken) {
         res.set('Access-Control-Expose-Headers','x-token, x-refresh-token');
         res.set('x-token', newTokens.token);
         res.set('x-refresh-token', newTokens.refreshToken')'
       }
         
        req.user = newToken.user;
       }
    }
    next();
  };
  
  app.use(cors('*'));
  app.useï¼ˆaddUser);
